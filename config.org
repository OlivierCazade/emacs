
* General
** General key binding
C-x + : resize windows equally
** Delight
#+BEGIN_SRC emacs-lisp
(use-package delight
  :ensure t
)
#+END_SRC
** Theme

#+begin_src emacs-lisp
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
		 (enable-theme 'ample))
    :defer t
    :ensure t)
   (set-face-attribute 'default nil :family "FuraCode Nerd Font Mono"  :height 140)
#+end_src

** Preferences
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (setq inhibit-startup-message t)
  (column-number-mode t)
  (line-number-mode t)
  (global-display-line-numbers-mode t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-auto-revert-mode t)
  (define-key global-map "\C-xk" 'kill-this-buffer)
  (show-paren-mode)
#+end_src


Saw this and found it funny :
https://www.reddit.com/r/emacs/comments/7v6fll/whats_in_your_initialscratchmessage/
#+begin_src emacs-lisp
(setq initial-scratch-message
      ";; - 'Tis but a scratch!\n;; - A scratch? Your arm's off!\n;; - No, it isn't!\n\n")
#+end_src

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :defer f
  :init
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "SHELL")
  (exec-path-from-shell-copy-env "PATH")
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

*** Mac customization
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil))
#+end_src

** Trailing whitespace
Trailing whitespace display and management
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
(add-hook 'diff-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** Backup files
Store every backup fils in ~/.emacs.d/backups.
#+begin_src emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
 '(("." . "~/.emacs.d/backups"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups
#+end_src

** Parenthesis
#+begin_src emacs-lisp

(use-package smartparens
  :ensure t
  :defer t
  :delight smartparens-mode
  :init
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode t)))

#+end_src

** Minibuffer
*** Ivy
#+begin_src emacs-lisp
(use-package ivy :ensure t
  :delight ivy-mode
  :defer t
  :init
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; change count format
  (setq ivy-count-format "(%d) ")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; ivy completion in magit
  (setq magit-completing-read-function 'ivy-completing-read)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order)))
  ;; use ivy as projectile completion
  (setq projectile-completion-system 'ivy)
  )

(use-package counsel
  :ensure t
  :defer t
  :bind
  (("M-x" . counsel-M-x)
   ("C-s" . swiper)
   ("C-x C-f" . counsel-find-file))
  )
#+end_src

*** smex
Smex is an M-x alternative
#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :defer t
  :init (smex-initialize))
#+end_src

** which-key
#+begin_src emacs-lisp

(use-package which-key
  :ensure t
  :defer t
  :delight which-key-mode
  :init (which-key-mode 1))

#+end_src

* Coding
** Project management
#+begin_src emacs-lisp
;; projectile
(use-package projectile
  :delight projectile-mode
  :defer t
  :init
  (projectile-mode)
  :bind ("M-<tab>" . projectile-find-file))
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+end_src


#+begin_src emacs-lisp
;; projectile
(use-package ibuffer-projectile
  :bind ("C-x C-b" . ibuffer)
  :defer t
  :init
 (add-hook 'ibuffer-hook
    (lambda ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))))
#+end_src

** Indent
#+begin_src emacs-lisp
(setq      tab-width 4
      indent-tabs-mode t)
#+end_src

** Git
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :init
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-completing-read-function 'ivy-completing-read)
  )
#+end_src

# Highlight uncommitted changes

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :defer t
    :config
    (global-git-gutter-mode 't)
    (add-to-list 'git-gutter:update-hooks 'focus-in-hook)
    :delight git-gutter-mode)
#+END_SRC

** Python
Usefull bindings:
 M-. Go to definition
 M-* Go back to the last place M-. was used

Use M-x elpy-config to check required binaries
#+begin_src emacs-lisp
(setq py-python-command "python3")
(setq elpy-rpc-python-command "python3")

(use-package elpy
  :ensure t
  :defer t
  :delight elpy-mode
  :init
  (elpy-enable))

#+end_src

** C
#+begin_src emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4)
#+end_src

** Yaml
#+begin_src emacs-lisp

(use-package yaml-mode
  :ensure t
  :defer t
  )

#+end_src
** markdown
#+begin_src emacs-lisp

(use-package markdown-mode
  :defer t
  :ensure t
  )

#+end_src

** ansible
#+begin_src emacs-lisp

(use-package ansible
  :defer t
  :ensure t
  :init
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
  )

#+end_src

** dockerfile
#+begin_src emacs-lisp

(use-package dockerfile-mode
  :defer t
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
  )

#+end_src

** terraform
#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t
  :defer t
  :mode "\\.tf$"
  :init
  (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
#+end_src

** Shell
#+begin_src emacs-lisp
(use-package flymake-shellcheck
  :ensure t
  :defer t
  :init
  (add-hook 'sh-mode-hook 'flymake-shellcheck-load)
  (add-hook 'sh-mode-hook 'flymake-mode))
#+end_src

* Org
** General
Global shortcuts :
C-c a org-agenda

In org-mode
C-c C-c on an Headline to add tag
C-c C-t to toggle TODO
#+begin_src emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure t
  :defer t
  :init
  (setq org-log-done t)
  (setq ord-directory (expand-file-name "~/org/"))
  (setq org-agenda-files (list org-directory))
  :bind
  ("C-c a" . org-agenda)
  )
#+end_src

** Org-babel

Highlight source-blocks

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

** Org-capture

#+begin_src emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+end_src

* Misc
** flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :ensure t
  :defer t
  :delight flyspell-mode
  :init
  (progn
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (add-hook 'text-mode-hook 'flyspell-mode)
    )
  :config
  ;; Sets flyspell correction to use two-finger mouse click
  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
  )
#+end_src
** Tramp
#+begin_src emacs-lisp

(use-package tramp
  :ensure t
  :defer t
  :init
  (setq tramp-default-method "ssh")
  )

#+end_src

* Work in progress
** Close compile on success
#+begin_src emacs-lisp

(defun notify-compilation-result(buffer msg)
  (if (string-match "^finished" msg)
      (progn
	(kill-this-buffer)))
  (setq current-frame (car (car (cdr (current-frame-configuration)))))
  (select-frame-set-input-focus current-frame)
  )

(add-to-list 'compilation-finish-functions
	     'notify-compilation-result)
#+end_src
** REST client
#+BEGIN_SRC emacs-lisp
  (use-package restclient
    :mode "\\.http$"
    :defer t
    :ensure t)
#+END_SRC

** Easier selection

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :defer t
    :bind ("C-=" . er/expand-region))
#+END_SRC
** Google this
Bindings to launch google searches. All functions are bound under C-c /
#+BEGIN_SRC emacs-lisp
  (use-package google-this
    :delight google-this-mode
    :defer t
    :init
    (google-this-mode)
    :ensure t)
#+END_SRC
** Web
*** Javascript

#+begin_src emacs-lisp
  (use-package js2-mode
    :ensure t
    :defer t
    :mode (("\\.js$" . js2-mode)
  ))
#+end_src

React mode
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :defer t
    :mode (("\\.jsx$'" . rjsx-mode)))
#+end_src

Code navigation

#+begin_src emacs-lisp
  (use-package xref-js2
    :init

    (add-hook
           'js2-mode-hook
           (lambda ()
	   (define-key js2-mode-map (kbd "M-.") nil)
             (add-hook 'xref-backend-functions #'xref-js2-xref-backend nil t)))
    :ensure t
    :defer t
  )
#+end_src


** Code format
#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :ensure t
    :defer t
    :init
      (add-hook 'js2-mode-hook 'format-all-mode)
      (add-hook 'web-mode-hook 'format-all-mode)
      (add-hook 'css-mode-hook 'format-all-mode)
      (add-hook 'python-mode-hook 'format-all-mode)
  )
#+END_SRC

** Cucumber
#+begin_src emacs-lisp

(use-package feature-mode
  :ensure t
  :defer t
  :mode "\\.feature$"
  )

#+end_src

** Completion

#+begin_src emacs-lisp

(use-package company
  :ensure t
  :defer t
  :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
    (global-company-mode t))

#+end_src

* To try
** org-reveal
** org-super-agenda
* Credits
Thanks to these persons for sharing their configuration :
 - [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua]]
 - [[https://github.com/jamiecollinson/dotfiles/blob/master/config.org/][Jamie Collinson]]
 - [[https://github.com/angrybacon/dotemacs][Mathieu Marques]]
 - [[http://www.bartuka.com/pages-output/personal-emacs-configuration/][Bartuka]]
