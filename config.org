* Theme

#+begin_src emacs-lisp
(use-package ample-theme
  :init (progn (load-theme 'ample t t)
	       (enable-theme 'ample))
  :defer t
  :ensure t)
#+end_src

* Global
#+begin_src emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
(menu-bar-mode -1)
(setq inhibit-startup-message t)
(column-number-mode t)
(line-number-mode t)
(global-linum-mode t)
(defalias 'yes-or-no-p 'y-or-n-p)
(global-auto-revert-mode t)
(define-key global-map "\C-xk" 'kill-this-buffer)
(show-paren-mode)
#+end_src


Saw this and found it funny :
https://www.reddit.com/r/emacs/comments/7v6fll/whats_in_your_initialscratchmessage/
#+begin_src emacs-lisp
(setq initial-scratch-message
      ";; - 'Tis but a scratch!\n;; - A scratch? Your arm's off!\n;; - No, it isn't!\n\n")
#+end_src

Trailing whitespace display and management
#+begin_src emacs-lisp
(setq-default show-trailing-whitespace t)
(add-hook 'diff-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'term-mode-hook (lambda () (setq show-trailing-whitespace nil)))
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :defer f
  :init
  (exec-path-from-shell-copy-env "GOPATH")
  (exec-path-from-shell-copy-env "SHELL")
  (exec-path-from-shell-copy-env "PATH")
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src


** Backup files
Store every backup fils in ~/.emacs.d/backups.
#+begin_src emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist
 '(("." . "~/.emacs.d/backups"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups
#+end_src

** smartparens
#+begin_src emacs-lisp

(use-package smartparens
  :ensure t
  :init
  (progn
    (require 'smartparens-config)
    (smartparens-global-mode t)))

#+end_src

** Mac customization
#+begin_src emacs-lisp
(when (eq system-type 'darwin)
  (setq mac-command-modifier 'meta)
  (setq mac-option-modifier nil))
#+end_src

* Org

#+begin_src emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode))
  :ensure t
  :defer t
  :init
  (progn
    (setq org-log-done t)
    )
  :bind
  ("C-c a" . org-agenda)
  )
#+end_src

** Org-babel

Highlight source-blocks

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)
#+end_src

* Python

#+begin_src emacs-lisp
(setq py-python-command "python3")

(use-package elpy
  :ensure t
  :init (elpy-enable))
#+end_src

* C
#+begin_src emacs-lisp
(setq c-default-style "linux"
      c-basic-offset 4
      tab-width 4
      indent-tabs-mode t)
#+end_src

* Ivy
#+begin_src emacs-lisp
(use-package ivy :ensure t
  :diminish (ivy-mode . "")
  :init
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; ivy completion in magit
  (setq magit-completing-read-function 'ivy-completing-read)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order)))
  ;; use ivy as projectile completion
  (setq projectile-completion-system 'ivy)
  )

(use-package counsel
  :ensure t
  :bind
  (("M-x" . counsel-M-x)
   ("C-s" . swiper)
   ("C-x C-f" . counsel-find-file))
  )
#+end_src

** smex
Smex is an M-x alternative
#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :defer t
  :init (smex-initialize))
#+end_src

* Git
#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :init
  (global-set-key (kbd "C-x g") 'magit-status)
  (setq magit-completing-read-function 'ivy-completing-read)
  )
#+end_src

Highlight uncommitted lines
#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :defer t
  :init
  (global-diff-hl-mode 1)
  )
#+end_src

** projectile
#+begin_src emacs-lisp
;; projectile
(use-package projectile
  :diminish projectile-mode
  :init
  (projectile-global-mode)
  :bind ("M-<tab>" . projectile-find-file))
#+end_src


#+begin_src emacs-lisp
;; projectile
(use-package ibuffer-projectile
  :bind ("C-x C-b" . ibuffer)
  :init
 (add-hook 'ibuffer-hook
    (lambda ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
        (ibuffer-do-sort-by-alphabetic)))))
#+end_src


* Aggressive-indent
#+begin_src emacs-lisp
(use-package aggressive-indent
  :ensure t
  :defer t
  :init
  (global-aggressive-indent-mode 1)
  ;;  (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
  )
#+end_src


* Yaml
#+begin_src emacs-lisp

(use-package yaml-mode
  :ensure t
  :defer t
  )

#+end_src
* flyspell
#+begin_src emacs-lisp
(use-package flyspell
  :ensure t
  :defer t
  :init
  (progn
    (add-hook 'prog-mode-hook 'flyspell-prog-mode)
    (add-hook 'text-mode-hook 'flyspell-mode)
    )
  :config
  ;; Sets flyspell correction to use two-finger mouse click
  (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word)
  )
#+end_src
* Tramp
#+begin_src emacs-lisp

(use-package tramp
  :ensure t
  :defer t
  :init
  (setq tramp-default-method "ssh")
  )

#+end_src

* which-key
#+begin_src emacs-lisp

(use-package which-key
  :ensure t
  :defer t
  :init (which-key-mode 1))

#+end_src
* flycheck
#+begin_src emacs-lisp

(setq fill-column 80)
(use-package flycheck
  :ensure t
  :defer t
  :init
  (global-flycheck-mode)
  )

(setq flycheck-python-pycompile-executable "python3")

#+end_src

* markdown
#+begin_src emacs-lisp

(use-package markdown-mode
  :defer t
  :ensure t
  )

#+end_src

* ansible
#+begin_src emacs-lisp

(use-package ansible
  :defer t
  :ensure t
  :init
  (add-hook 'yaml-mode-hook '(lambda () (ansible 1)))
  )

#+end_src

* dockerfile
#+begin_src emacs-lisp

(use-package dockerfile-mode
  :defer t
  :ensure t
  :init
  (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
  )

#+end_src

* terraform
#+begin_src emacs-lisp
(use-package terraform-mode
  :ensure t
  :mode "\\.tf$"
  :init
  (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
#+end_src
* Work in progress
** Close compile on success
#+begin_src emacs-lisp

(defun notify-compilation-result(buffer msg)
  (if (string-match "^finished" msg)
      (progn
	(kill-this-buffer)))
  (setq current-frame (car (car (cdr (current-frame-configuration)))))
  (select-frame-set-input-focus current-frame)
  )

(add-to-list 'compilation-finish-functions
	     'notify-compilation-result)
#+end_src
